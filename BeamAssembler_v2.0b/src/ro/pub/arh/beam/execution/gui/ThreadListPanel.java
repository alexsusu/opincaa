/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ThreadListPanel.java
 *
 * Created on Apr 25, 2011, 5:04:26 PM
 */

package ro.pub.arh.beam.execution.gui;

import javax.swing.JTree;
import javax.swing.tree.DefaultMutableTreeNode;
import ro.pub.arh.beam.hardware.ExecutionEnvironment;
import ro.pub.arh.beam.hardware.MachineConstants;

/**
 *
 * @author Echo
 */
public class ThreadListPanel extends javax.swing.JPanel {

    private ExecutionEnvironment environment;


    /** Creates new form ThreadListPanel */
    public ThreadListPanel() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Thread");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(jTree1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 414, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
public void update(ExecutionEnvironment _environment){
    environment = _environment;
    int _threadCount = _environment.read(MachineConstants.THREAD_LIST_ADDRESS);
    int _nodeAddress = _environment.read(MachineConstants.THREAD_LIST_ADDRESS + 4);
    jTree1 = new JTree(new DefaultMutableTreeNode("Threads"));
    DefaultMutableTreeNode _top = ((DefaultMutableTreeNode)jTree1.getModel().getRoot());
    for(int i=0; i<_threadCount; i++){
        DefaultMutableTreeNode _thread = new DefaultMutableTreeNode("Thread " + environment.read(_nodeAddress) + " (0x" + Integer.toHexString(_nodeAddress) +")");
        updateThread(_thread, _nodeAddress);
        _top.add(_thread);
        _nodeAddress = _environment.read(_nodeAddress + 24);
    }
    jScrollPane1.setViewportView(jTree1);
}

private void updateThread(DefaultMutableTreeNode _thread, int _nodeAddress){
    //ID
    _thread.add(new DefaultMutableTreeNode("ID = " + environment.read(_nodeAddress)));

    //State
    int _value = environment.read(_nodeAddress + 4);
    DefaultMutableTreeNode _temp = new DefaultMutableTreeNode("State: " + decodeState(_value));
    _thread.add(_temp);

    //QoS
    _temp = new DefaultMutableTreeNode("QoS");
    _thread.add(_temp);
    updateQoS(_temp, _nodeAddress + 8);

    _temp = new DefaultMutableTreeNode("Context");
    _thread.add(_temp);
    updateContext(_temp, _nodeAddress + 16);

    _value = environment.read(_nodeAddress + 24);
    _temp = new DefaultMutableTreeNode("Next (0x" + Integer.toHexString(_value) + ")");
    _thread.add(_temp);

    _value = environment.read(_nodeAddress + 28);
    _temp = new DefaultMutableTreeNode("Prev (0x" + Integer.toHexString(_value) + ")");
    _thread.add(_temp);
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

private String decodeState(int _value) {
    switch(_value){
        case 0: return "RUNNING";
        case 1: return "READY";
        case 2: return "NEW";
        case 3: return "DUMMY";
        case 4: return "SLEEPING";
        case 5: return "DEFUNCT";
        default:
            System.out.println("WARNING: invalid state code!");
            return "UNKNOWN (" + _value + ")";
    }
}

private void updateQoS(DefaultMutableTreeNode _qos, int _struct) {
    _qos.add(new DefaultMutableTreeNode("Use qos = " + environment.read(_struct)));
    _qos.add(new DefaultMutableTreeNode("Placeholder = " + environment.read(_struct + 4)));
}

private void updateContext(DefaultMutableTreeNode _context, int _struct) {
    _context.add(new DefaultMutableTreeNode("User stack = 0x" + Integer.toHexString(environment.read(_struct))));
    _context.add(new DefaultMutableTreeNode("Kernel stack = 0x" + Integer.toHexString(environment.read(_struct + 4))));
}

}
