/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CodePanel.java
 *
 * Created on 17.10.2009, 15:42:34
 */

package ro.pub.arh.beam.assembler.gui.panels;

import java.awt.datatransfer.*;
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.event.*;
import javax.swing.undo.UndoManager;
import java.awt.*;
import java.awt.event.MouseEvent;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.*;
import javax.swing.text.*;
import ro.pub.arh.beam.assembler.gui.*;
import ro.pub.arh.beam.utils.gui.HighlightedTextArea;

/**
 *
 * @author Ares
 */
public class CodePanel extends javax.swing.JPanel implements ClipboardOwner, DocumentListener, UndoableEditListener {

    protected String fileName;
    private long timeStamp;
    protected AssemblerGui parentFrame;
    protected static Clipboard clipboard;
    protected UndoManager undo;

    protected String extension;
    protected boolean modified;

    private boolean breakpoints;

    public static final short NUMBERS_WIDTH = 100;
    

    public static boolean highlight;

    static{
        try{
            highlight = GuiConfig.config.highLightEnabled;
            clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        }catch(Exception _e){
            clipboard = null;
            highlight = true;
        }
    }

    public CodePanel(AssemblerGui _parentFrame) {
        initComponents();
        parentFrame = _parentFrame;
        fileName = null;
        modified = false;
        undo = new UndoManager();
        codeArea.getDocument().addDocumentListener(this);
        codeArea.getDocument().addUndoableEditListener(this);
        updateLineNumbers();
        jScrollPane3.setVerticalScrollBar(jScrollPane2.getVerticalScrollBar());
    }

    public CodePanel(AssemblerGui _parentFrame, String _fileName) throws IOException{
        this(_parentFrame, _fileName, false);
    }

    public CodePanel(AssemblerGui _parentFrame, String _fileName, boolean _breakpoints) throws IOException{
        this(_parentFrame);
        breakpoints = _breakpoints;
        codeArea.getDocument().removeDocumentListener(this);
        codeArea.getDocument().removeUndoableEditListener(this);
        fileName = _fileName;
        getFileContent(_fileName);
        codeArea.getDocument().addDocumentListener(this);
        codeArea.getDocument().addUndoableEditListener(this);
        updateLineNumbers();
        jScrollPane3.setVerticalScrollBar(jScrollPane2.getVerticalScrollBar());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        copyMenuItem = new javax.swing.JMenuItem();
        cutMenuItem = new javax.swing.JMenuItem();
        pasteMenuItem = new javax.swing.JMenuItem();
        jSplitPane1 = new javax.swing.JSplitPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextArea1 = new MyTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        codeArea = new HighlightedTextArea();
        codeArea.setTabSize(4);

        copyMenuItem.setMnemonic('c');
        copyMenuItem.setText("Copy");
        copyMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(copyMenuItem);

        cutMenuItem.setMnemonic('u');
        cutMenuItem.setText("Cut");
        cutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(cutMenuItem);

        pasteMenuItem.setMnemonic('a');
        pasteMenuItem.setText("Paste");
        pasteMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteMenuItemActionPerformed(evt);
            }
        });
        jPopupMenu1.add(pasteMenuItem);

        addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                formFocusGained(evt);
            }
        });

        jSplitPane1.setDividerLocation(30);
        jSplitPane1.setDividerSize(3);

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane2.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jTextArea1.setBackground(new java.awt.Color(204, 204, 204));
        jTextArea1.setColumns(4);
        jTextArea1.setEditable(false);
        jTextArea1.setFont(new java.awt.Font("Courier 10 Pitch", 0, 12));
        jTextArea1.setRows(5);
        ((DefaultCaret)jTextArea1.getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        jTextArea1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextArea1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTextArea1);

        jSplitPane1.setLeftComponent(jScrollPane2);

        codeArea.setBackground(new java.awt.Color(242,241,240));
        codeArea.setColumns(20);
        codeArea.setFont(new java.awt.Font("Courier 10 Pitch", 0, 12)); // NOI18N
        codeArea.setRows(5);
        codeArea.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                codeAreaFocusGained(evt);
            }
        });
        jScrollPane3.setViewportView(codeArea);

        jSplitPane1.setRightComponent(jScrollPane3);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 437, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 331, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void codeAreaFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_codeAreaFocusGained
        if(fileName != null && (new File(fileName)).lastModified() != timeStamp){
            int _option = JOptionPane.showOptionDialog(parentFrame, "File has been modified on disk. Do you want to reload?",
                    "Reload?", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
            if(_option == JOptionPane.YES_OPTION){
                try{
                    getFileContent(fileName);
                }catch(IOException _e){
                    JOptionPane.showMessageDialog(parentFrame, "Error reading from file " + fileName + "!");
                }
            }else{
                timeStamp = (new File(fileName)).lastModified();
            }
        }
    }//GEN-LAST:event_codeAreaFocusGained

    public void askToReload(){
        codeAreaFocusGained(null);
    }

    private void formFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_formFocusGained
        codeArea.requestFocusInWindow();
    }//GEN-LAST:event_formFocusGained

    private void copyMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyMenuItemActionPerformed
        copy();
    }//GEN-LAST:event_copyMenuItemActionPerformed

    private void cutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutMenuItemActionPerformed
        try {
            cut();
        } catch (BadLocationException ex) {
            Logger.getLogger(CodePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cutMenuItemActionPerformed

    private void pasteMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteMenuItemActionPerformed
        try {
            paste();
        } catch (UnsupportedFlavorException ex) {
            Logger.getLogger(CodePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(CodePanel.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(CodePanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_pasteMenuItemActionPerformed

    private void jTextArea1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextArea1MouseClicked
        if(!breakpoints){
            return;
        }

        if(evt.getButton() == MouseEvent.BUTTON1){
            int _lineNumber = (evt.getPoint().y - evt.getComponent().getY() + ((MyTextArea)jTextArea1).getRowHeight() - 1) / ((MyTextArea)jTextArea1).getRowHeight();
            System.out.println(_lineNumber);
        }
    }//GEN-LAST:event_jTextArea1MouseClicked

    protected void getFileContent(String _fileName) throws IOException{

        File _file = new File(_fileName);
        byte[] _buffer = new byte[(int)_file.length()];
        FileInputStream _stream = new FileInputStream(_file);
        _stream.read(_buffer);
        _stream.close();

        ((DefaultCaret)codeArea.getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        codeArea.setText((new String(_buffer)).replaceAll("\r\n", "\n"));
        ((DefaultCaret)codeArea.getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        timeStamp = (new File(_fileName)).lastModified();
        modified = false;
        parentFrame.updateTabName(this, fileName, modified);
    }

    public void getFileContent(){
        if(fileName == null){
            return;
        }
        try{
            getFileContent(fileName);
        }catch(IOException _e){
            JOptionPane.showMessageDialog(parentFrame, "Error reading from file " + fileName + "!");
        }
    }

    public String getFileName(){
        return fileName;
    }

    public void copy(){
	StringSelection _newContents = new StringSelection(codeArea.getSelectedText());
	clipboard.setContents(_newContents, this);
    }

    public void cut() throws BadLocationException{
	StringSelection _newContents = new StringSelection(codeArea.getSelectedText());
        codeArea.getDocument().remove(codeArea.getSelectionStart(), codeArea.getSelectionEnd() - codeArea.getSelectionStart());
	clipboard.setContents(_newContents, this);
    }

    public void paste() throws UnsupportedFlavorException, IOException, BadLocationException{
        Transferable _content = clipboard.getContents(this);
	String _data = (String)_content.getTransferData(DataFlavor.stringFlavor);
        codeArea.getDocument().insertString(codeArea.getCaretPosition(), _data, null);
    }

    public void lostOwnership(Clipboard clipboard, Transferable contents){
        //so what?
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    protected javax.swing.JTextArea codeArea;
    private javax.swing.JMenuItem copyMenuItem;
    private javax.swing.JMenuItem cutMenuItem;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JScrollPane jScrollPane2;
    protected javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JMenuItem pasteMenuItem;
    // End of variables declaration//GEN-END:variables

    public String saveFile() throws IOException{

        if(fileName == null){
            return saveFileAs();
        }

        String _buffer = codeArea.getText().replaceAll("\n", "\r\n");
        FileOutputStream _file = new FileOutputStream(fileName);
        _file.write(_buffer.getBytes());
        _file.close();
        modified = false;
        parentFrame.updateTabName(this, fileName, modified);
        timeStamp = (new File(fileName)).lastModified();
        return fileName;
    }

    public String saveFileAs() throws IOException{
        File _newFile;
        int _result = jFileChooser1.showSaveDialog(this);
        _newFile = jFileChooser1.getSelectedFile();
        if(_result == JFileChooser.APPROVE_OPTION){
            fileName = _newFile.getAbsolutePath();
            String []_extensions = extension.split("\\,");
            boolean _hasExtension = false;
            for(int i=0; i<_extensions.length; i++){
                if(fileName.endsWith(_extensions[i])){
                    _hasExtension = true;
                    break;
                }
            }
            if(!_hasExtension){
                fileName = fileName + _extensions[0];
            }
            saveFile();
        }
        //parentFrame.updateTabName(this, fileName, modified);
        return fileName;
    }

    protected void initFileChooser() {
        jFileChooser1.setFileFilter(new javax.swing.filechooser.FileFilter() {

            public boolean accept(File _pathname){
                if(_pathname.isDirectory()){
                    return true;
                }
                String[] _extensions = extension.split("\\,");
                for(int i=0; i<_extensions.length; i++){
                    if(_pathname.getAbsolutePath().endsWith(_extensions[i])){
                        return true;
                    }
                }
                return false;
            }

            @Override
            public String getDescription(){
                return extension;
            }
        });
        jFileChooser1.setCurrentDirectory(GuiConfig.config.DIRECTORY_PATH);
    }

    public void insertUpdate(DocumentEvent _event){
        changedUpdate(_event);
        updateLineNumbers();
        updateHighlight();
    }

    public void removeUpdate(DocumentEvent _event){
        changedUpdate(_event);
        updateHighlight();
    }

    public void changedUpdate(DocumentEvent _event){
        modified = true;
        if(parentFrame != null){
            parentFrame.updateTabName(this, fileName, modified);
        }
        updateHighlight();
    }

    public boolean askToSave(){
        if(!modified){
            return true;
        }else{
            int _answer = JOptionPane.showConfirmDialog(parentFrame, "File has been modified. Save?");
            if(_answer == JOptionPane.NO_OPTION){
                return true;
            }else if(_answer == JOptionPane.CANCEL_OPTION){
                return false;
            }else if(_answer == JOptionPane.YES_OPTION){
                try{
                    return saveFile() != null;
                }catch(IOException _ioe){
                    _ioe.printStackTrace();
                    return false;
                }
            }

            throw new RuntimeException("Invalid option.");
        }
    }

    public void undoableEditHappened(UndoableEditEvent e){
        if(parentFrame != null){
            undo.addEdit(e.getEdit());
            parentFrame.updateUndoStates();
        }
        
    }

    public void undo(){
        undo.undo();
    }

    public void redo(){
        undo.redo();
    }

    public boolean canUndo(){
        return undo.canUndo();
    }

    public boolean canRedo(){
        return undo.canRedo();
    }

    private void updateLineNumbers(){
        int _lineCount = jTextArea1.getLineCount();
        int _textLineCount = codeArea.getLineCount();
        for(int i=0; i<_textLineCount - _lineCount + 1; i++){
            jTextArea1.append((_lineCount + i) + "\n");
        }
    }

    public void setLineNumbersVisible(boolean _state){
        jTextArea1.setVisible(_state);
        jSplitPane1.setEnabled(_state);
        jSplitPane1.setDividerLocation(_state ? 30 : 0);
    }

    public void updateHighlight() {
        //throw new UnsupportedOperationException("Not implemented for generic CodePanel");
    }

    public static void setHighLight(boolean _highlight) {
        highlight = _highlight;
    }

public HighlightedTextArea getTextArea() {
    return (HighlightedTextArea)codeArea;
}

public boolean find(String _regex) {
    int _caret = codeArea.getCaretPosition();
    String _text = codeArea.getText();
    Pattern _pattern = Pattern.compile(_regex);
    Matcher _matcher = _pattern.matcher(_text);
    if(_matcher.find(_caret)){
        codeArea.setCaretPosition(_matcher.start());
        codeArea.setSelectionStart(_matcher.start());
        codeArea.setSelectionEnd(_matcher.end());
        return true;
    }
    return false;
}

//-----------------------------------------------------------------
//-----------------------------------------------------------------
class MyTextArea extends JTextArea{
        @Override
    public int getRowHeight(){
        return super.getRowHeight();
    }
}
//-----------------------------------------------------------------

}
