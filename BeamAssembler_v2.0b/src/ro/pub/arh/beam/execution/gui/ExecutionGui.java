/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * EmulatorGui.java
 *
 * Created on 04.11.2009, 13:39:07
 */

package ro.pub.arh.beam.execution.gui;

import java.awt.Color;
import java.awt.event.ActionEvent;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import ro.pub.arh.beam.assembler.Assembler;
import ro.pub.arh.beam.hardware.emulator.core.array.Line;
import ro.pub.arh.beam.hardware.emulator.core.ThreadStatus;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;
import javax.swing.text.DefaultCaret;
import ro.pub.arh.beam.assembler.gui.GuiConfig;
import ro.pub.arh.beam.assembler.gui.panels.CodePanel;
import ro.pub.arh.beam.common.ImageUtils;
import ro.pub.arh.beam.hardware.emulator.tools.Instruction;
import ro.pub.arh.beam.hardware.ExecutionEnvironment;
import ro.pub.arh.beam.hardware.MachineConstants;
import ro.pub.arh.beam.hardware.emulator.Emulator;
import ro.pub.arh.beam.hardware.emulator.periferals.InputOutputPeripheral;
import ro.pub.arh.beam.utils.gui.HighlightedTextArea;

/**
 *
 * @author Ares
 */
public class ExecutionGui extends javax.swing.JFrame{

    private ExecutionEnvironment executionEnvironment;

    public static ExecutionGui lastGui;

    private static final int ROWS_TO_DISPLAY = 8;
    private long memoryOffset;
    private RS232Gui rs232Gui;
    private int breakPointLine;

    private static final int STATUS_DONE = -1;
    private static final int STATUS_TIMEOUT = -2;

    private long instructionCount[];
    /** Creates new form EmulatorGui */
    public ExecutionGui() {
        initComponents();
        lastGui = this;
        memoryOffset = Long.parseLong(jTextField3.getText());
        jSplitPane1.setDividerLocation(0.5);
        jDialog2.setLocationRelativeTo(this);
        instructionCount = new long[MachineConstants.THREAD_COUNT];
        rs232Gui = new RS232Gui();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser(".");
        jDialog2 = new javax.swing.JDialog();
        jProgressBar1 = new javax.swing.JProgressBar();
        jButton4 = new javax.swing.JButton();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jToolBar1 = new javax.swing.JToolBar();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel1 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel2 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jToggleButton1 = new javax.swing.JToggleButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        jSplitPane1 = new javax.swing.JSplitPane();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        jDialog2.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog2.setTitle("Executing");
        jDialog2.setMinimumSize(new java.awt.Dimension(400, 110));
        jDialog2.setResizable(false);

        jProgressBar1.setIndeterminate(true);
        jProgressBar1.setString("Executing...");
        jProgressBar1.setStringPainted(true);

        jButton4.setText("Stop");
        jButton4.setFocusable(false);
        jButton4.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton4.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jDialog2Layout = new javax.swing.GroupLayout(jDialog2.getContentPane());
        jDialog2.getContentPane().setLayout(jDialog2Layout);
        jDialog2Layout.setHorizontalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addGroup(jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 376, Short.MAX_VALUE))
                    .addGroup(jDialog2Layout.createSequentialGroup()
                        .addGap(156, 156, 156)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jDialog2Layout.setVerticalGroup(
            jDialog2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jDialog2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4)
                .addContainerGap())
        );

        jMenuItem1.setText("Set Breakpoint");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem1);

        jMenuItem2.setText("Remove Breakpoint");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jPopupMenu1.add(jMenuItem2);

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Execution GUI v0.2b");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);

        jButton1.setText("Run 1");
        jButton1.setEnabled(false);
        jButton1.setFocusable(false);
        jButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton1);

        jButton2.setText("Run all");
        jButton2.setEnabled(false);
        jButton2.setFocusable(false);
        jButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton2);

        jButton3.setText("Run:");
        jButton3.setEnabled(false);
        jButton3.setFocusable(false);
        jButton3.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton3.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton3);

        jTextField1.setColumns(5);
        jTextField1.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        jTextField1.setText("1");
        jToolBar1.add(jTextField1);

        jButton10.setText("Reset");
        jButton10.setEnabled(false);
        jButton10.setFocusable(false);
        jButton10.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton10.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton10);
        jToolBar1.add(jSeparator1);

        jLabel1.setText("Cycles:");
        jToolBar1.add(jLabel1);

        jTextField2.setColumns(5);
        jTextField2.setEditable(false);
        jTextField2.setText("0");
        jToolBar1.add(jTextField2);
        jToolBar1.add(jSeparator2);

        jLabel2.setText("Mem Address:");
        jToolBar1.add(jLabel2);

        jTextField3.setColumns(5);
        jTextField3.setText("0");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jToolBar1.add(jTextField3);

        jButton5.setText("Change");
        jButton5.setFocusable(false);
        jButton5.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton5.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton5);

        jButton6.setText("Write To Mem");
        jButton6.setFocusable(false);
        jButton6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton6.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton6);

        jButton11.setText("Read From Mem");
        jButton11.setFocusable(false);
        jButton11.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jButton11.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar1.add(jButton11);

        jToggleButton1.setText("Waveform");
        jToggleButton1.setFocusable(false);
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });
        jToolBar1.add(jToggleButton1);

        jSplitPane2.setDividerLocation(400);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane2.setResizeWeight(1.0);

        jSplitPane1.setDividerLocation(500);
        jSplitPane1.setResizeWeight(1.0);

        jTabbedPane1.setTabLayoutPolicy(javax.swing.JTabbedPane.SCROLL_TAB_LAYOUT);
        jTabbedPane1.setTabPlacement(javax.swing.JTabbedPane.RIGHT);
        for(int i=0; i<Assembler.THREADS_COUNT; i++){
            jTabbedPane1.addTab("Thread " + i, new ThreadPanel());
        }
        jTabbedPane1.addTab("Array", new ArrayPanel());
        jTabbedPane1.addTab("Software Threads", new ThreadListPanel());
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });
        jSplitPane1.setRightComponent(jTabbedPane1);

        jSplitPane2.setLeftComponent(jSplitPane1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Base Address", "Word0", "Word1", "Word2", "Word3"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);

        jSplitPane2.setRightComponent(jScrollPane2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 891, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jSplitPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(568, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        resetButtonState(false);
        try{
            executionEnvironment.run(1);
        }catch(Exception _e){
            jDialog2.setVisible(false);
            JOptionPane.showMessageDialog(this, _e.getClass().getName() + " exception thrown: " + _e.getMessage(), "Exception!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        resetButtonState(false);
        try{
            new Thread(new Runnable(){
                public void run(){
                    jDialog2.setVisible(true);
                }

            }).start();
            executionEnvironment.run(-1);
        }catch(Exception _e){
            jDialog2.setVisible(false);
            JOptionPane.showMessageDialog(this, _e.getClass().getName() + " exception thrown: " + _e.getMessage(), "Exception!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        resetButtonState(false);
        try {
            new Thread(new Runnable(){
                public void run(){
                    jDialog2.setVisible(true);
                }

            }).start();
            executionEnvironment.run(Integer.parseInt(jTextField1.getText()));
        }catch (NumberFormatException _numberFormatException) {
            JOptionPane.showMessageDialog(this, "Invalid instruction count.", "Error!", JOptionPane.ERROR_MESSAGE);
            resetButtonState(true);
            jDialog2.setVisible(false);
        }catch(Exception _e){
            jDialog2.setVisible(false);
            JOptionPane.showMessageDialog(this, _e.getClass().getName() + " exception thrown: " + _e.getMessage(), "Exception!", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        updateCurrentInstructionLine();
        if(executionEnvironment instanceof Emulator){
            updateCycleCount(jTabbedPane1.getSelectedIndex() < MachineConstants.THREAD_COUNT ? instructionCount[jTabbedPane1.getSelectedIndex()] : 0);
        }
        if(jTabbedPane1.getSelectedIndex() == MachineConstants.THREAD_COUNT + 1){
            ((ThreadListPanel)jTabbedPane1.getComponentAt(MachineConstants.THREAD_COUNT + 1)).update(executionEnvironment);
        }
    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        executionEnvironment.stopExecution();
        jDialog2.setVisible(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        updateMemoryBase(evt);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        updateMemoryBase(evt);
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed
        // TODO add your handling code here:
        executionEnvironment.saveWaveform(jToggleButton1.isSelected());
    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        resetButtonState(false);
        try {
            executionEnvironment.reset();
        } catch (IOException ex) {
            ex.printStackTrace();
        }
        for(int i=0; i<instructionCount.length; i++){
            instructionCount[i] = 0;
        }
    }//GEN-LAST:event_jButton10ActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        System.err.println("Execution GUI closed...");
        executionEnvironment.release();
    }//GEN-LAST:event_formWindowClosed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        ((DefaultCaret)codePanel.getTextArea().getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        executionEnvironment.addBreakpoint(breakPointLine);
        updateCurrentInstructionLineForPanel(false);
        ((DefaultCaret)codePanel.getTextArea().getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        ((DefaultCaret)codePanel.getTextArea().getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        executionEnvironment.removeBreakpoint(breakPointLine);
        updateCurrentInstructionLineForPanel(false);
        ((DefaultCaret)codePanel.getTextArea().getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        JFileChooser _fileChooser = new JFileChooser(".");
        _fileChooser.setDialogTitle("Select File");
        _fileChooser.setDialogType(JFileChooser.OPEN_DIALOG);
        _fileChooser.setCurrentDirectory(new File(GuiConfig.config.BIN_PATH));
        _fileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f){
                return f.isDirectory() || f.getName().endsWith(".png");
            }

            @Override
            public String getDescription(){
                return ".png";
            }
        });

         try {
            if(_fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                String _value = JOptionPane.showInputDialog("Insert address:");
                if(_value == null){
                    return;
                }
                byte[] _buffer = ImageUtils.loadBitmap(_fileChooser.getSelectedFile());
                executionEnvironment.loadBinary(_buffer, Long.decode(_value).intValue());
                GuiConfig.config.BIN_PATH = _fileChooser.getSelectedFile().getParent();
                JOptionPane.showMessageDialog(this, "Load successful.", "Binary load", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to load binary: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();

        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
       JFileChooser _fileChooser = new JFileChooser(".");
        _fileChooser.setDialogTitle("Select File");
        _fileChooser.setDialogType(JFileChooser.SAVE_DIALOG);
        _fileChooser.setCurrentDirectory(new File(GuiConfig.config.BIN_PATH));
        _fileChooser.setFileFilter(new FileFilter() {

            @Override
            public boolean accept(File f){
                return true;
            }

            @Override
            public String getDescription(){
                return "";
            }
        });

         try {
            if(_fileChooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION){
                String _address = JOptionPane.showInputDialog("Insert address:");
                if(_address == null){
                    return;
                }

                byte[] _buffer = executionEnvironment.saveBinary(Long.decode(_address).intValue(), ImageUtils.DEFAULT_IMAGE_WIDTH * ImageUtils.DEFAULT_IMAGE_HEIGHT * 2);
                ImageUtils.saveBitmap(_fileChooser.getSelectedFile(), _buffer);
                GuiConfig.config.BIN_PATH = _fileChooser.getSelectedFile().getParent();
                JOptionPane.showMessageDialog(this, "Save successful.", "Binary save", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Unable to save binary: " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            ex.printStackTrace();

        }
    }//GEN-LAST:event_jButton11ActionPerformed

public void updateCycleCount(int _threadId, long _insnCount){
    instructionCount[_threadId] = _insnCount;
    updateCycleCount(jTabbedPane1.getSelectedIndex() < MachineConstants.THREAD_COUNT ? instructionCount[jTabbedPane1.getSelectedIndex()] : 0);
}

public void updateCurrentInstructionLine(){
    int _threadId = jTabbedPane1.getSelectedIndex();
    if(_threadId >= MachineConstants.THREAD_COUNT){
        return;
    }
    updateCurrentInstructionLineForPanel();
}

private void updateCurrentInstructionLineForPanel() {
    updateCurrentInstructionLineForPanel(true);
}

private void updateCurrentInstructionLineForPanel(boolean _pcChanged) {
    int _threadId = jTabbedPane1.getSelectedIndex();
    if(_threadId >= MachineConstants.THREAD_COUNT){
        return;
    }

    ((DefaultCaret)codePanel.getTextArea().getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
    
    int _programCounter = executionEnvironment.getPcForThread(_threadId);
    boolean _pcDrawn = false;
    int[] _breakpoints = executionEnvironment.readBreakpoints();

    HighlightedTextArea _textArea = codePanel.getTextArea();
    _textArea.removeHighlights();

    if(_breakpoints != null){
        for(int i=0; i<_breakpoints.length; i++){
            if(_breakpoints[i] != 0){
                int _lineNumber = executionEnvironment.getLineSeeker().getLineNumber(_breakpoints[i]);
                if(_breakpoints[i] == _programCounter){
                    if(_pcChanged){
                        ((DefaultCaret)codePanel.getTextArea().getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
                    }
                
                    _textArea.highlight(_lineNumber, Color.GREEN);
                    _pcDrawn = true;
                    ((DefaultCaret)codePanel.getTextArea().getCaret()).setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
                }else{
                    _textArea.highlight(_lineNumber, Color.RED);
                }
            }
        }
    }
    
    if(_pcChanged){
        ((DefaultCaret)codePanel.getTextArea().getCaret()).setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
    }
    if(!_pcDrawn){
        if(_textArea != null){
            int _lineNumber = executionEnvironment.getLineSeeker().getLineNumber(_programCounter);
            _textArea.highlight(_lineNumber, Color.WHITE);
        }

    }

}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JDialog jDialog2;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables
    private CodePanel codePanel;
    
    public void assign(ExecutionEnvironment _executionEnvironment) {
        executionEnvironment = _executionEnvironment;
        rs232Gui.assignRS232((InputOutputPeripheral)executionEnvironment.getPeripheral("RS232"));
    }

    public void updateMemoryLocation(int _address, int _data){
        if(_address < memoryOffset || _address >= (memoryOffset + ROWS_TO_DISPLAY * 16)){
            return;
        }
        _address -= memoryOffset;
        int _row = _address >>> 4;
        int _column = ((_address >>> 2) & 0x3) + 1;
        jTable1.getModel().setValueAt(Integer.toHexString(_data), _row, _column);
    }

    public void updateThreadsStatus(ThreadStatus[] _threads){
        for(int i=0; i<MachineConstants.THREAD_COUNT; i++){
            ThreadPanel _threadPanel = (ThreadPanel)jTabbedPane1.getComponentAt(i);
            _threadPanel.updateThreadStatus(_threads[i]);
        }

        for(int i=0; i<MachineConstants.THREAD_COUNT; i++){
            if(_threads[i].getStatus() == ThreadStatus.THREAD_STATUS_EMPTY){
                jTabbedPane1.setBackgroundAt(i, Color.gray);
            }else if(_threads[i].getStatus() == ThreadStatus.THREAD_STATUS_RUNNING){
                jTabbedPane1.setBackgroundAt(i, Color.green);
            }else if(_threads[i].getStatus() == ThreadStatus.THREAD_STATUS_WAIT_DATA ||
                    _threads[i].getStatus() == ThreadStatus.THREAD_STATUS_WAIT_PROG ||
                    _threads[i].getStatus() == ThreadStatus.THREAD_STATUS_BOTH ||
                    _threads[i].getStatus() == ThreadStatus.THREAD_STATUS_WAIT_STORE){
                jTabbedPane1.setBackgroundAt(i, Color.blue);
            }else if(_threads[i].getStatus() == ThreadStatus.THREAD_STATUS_READY){
                jTabbedPane1.setBackgroundAt(i, Color.yellow);
            }else if(_threads[i].getStatus() == ThreadStatus.THREAD_STATUS_BEING_REMOVED){
                jTabbedPane1.setBackgroundAt(i, Color.red);
            }else{
                throw new RuntimeException("Invalid thread status code for thread " + i + ": " + _threads[i].getStatus() +"!");
            }
        }
    }

    public void updateRegisterFile(int[][] _registerFile){
        for(int i=0; i<MachineConstants.THREAD_COUNT; i++){
            ThreadPanel _threadPanel = (ThreadPanel)jTabbedPane1.getComponentAt(i);
            _threadPanel.updateRegisterFile(_registerFile[i]);
        }
    }

    public void updateRegisterFile(int _thread, int _data, int _address){
        ThreadPanel _threadPanel = (ThreadPanel)jTabbedPane1.getComponentAt(_thread);
        _threadPanel.updateRegisterFile(_address, _data);
    }

    public void updateCycleCount(long _cycleCount){
        jTextField2.setText(String.valueOf(_cycleCount));
    }

    private void programDone(long _duration){
        updateCurrentInstructionLine();
        if(_duration > 0){
            JOptionPane.showMessageDialog(this, "Program executed successfully in " + _duration / 1000 + " seconds.", "Succes!", JOptionPane.INFORMATION_MESSAGE);
        }else{
            JOptionPane.showMessageDialog(this, "Program executed successfully.", "Succes!", JOptionPane.INFORMATION_MESSAGE);
        }
        
        resetButtonState(false);
        jButton10.setEnabled(true);
//	jToggleButton1.setEnabled(true);
    }

    public void updateInstruction(Instruction[] _instructions, int[] _pc){
        for(int i=0; i<MachineConstants.THREAD_COUNT; i++){
            ThreadPanel _threadPanel = (ThreadPanel)jTabbedPane1.getComponentAt(i);
            _threadPanel.updateInstruction(_instructions[i], _pc[i]);
        }
    }

    public void loadFile(String _fileName){
        FileInputStream _stream = null;
        try {
            File _file = new File(_fileName);
            _stream = new FileInputStream(_file);
            byte[] _buffer = new byte[(int)_file.length()];
            _stream.read(_buffer);
            _stream.close();

            CodePanel _codePanel = new CodePanel(null);
            //_codePanel.setVisible(true);
            _codePanel.getTextArea().setEditable(false);
            _codePanel.getTextArea().setText(new String(_buffer));
            _codePanel.getTextArea().addMouseListener(new java.awt.event.MouseAdapter() {
                @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                codeAreaClicked(evt);
            }
            });
            jSplitPane1.setLeftComponent(_codePanel);
            codePanel = _codePanel;
        }catch (Exception _ex) {
            _ex.printStackTrace();
            Logger.getLogger(ExecutionGui.class.getName()).log(Level.SEVERE, null, _ex);
        }
    }

    private void codeAreaClicked(MouseEvent evt) {
        breakPointLine = evt.getY() / ((HighlightedTextArea)evt.getComponent()).getRowHeight() + 1;
        if(evt.getButton() == MouseEvent.BUTTON3 && evt.getClickCount() == 1){
            jPopupMenu1.show(evt.getComponent(), evt.getX(), evt.getY());
        }
    }

    public void resetButtonState(boolean _state){
        jButton1.setEnabled(_state);
        jButton2.setEnabled(_state);
        jButton3.setEnabled(_state);
        jButton10.setEnabled(_state);
//        jToggleButton1.setEnabled(_state);
    }

    public ExecutionEnvironment getExecutionEnvironment() {
        return executionEnvironment;
    }

    public void executionDone(int _threadStatus){
        executionDone(_threadStatus, -1);
    }

    public void executionDone(int _threadStatus, long _duration){
        jDialog2.setVisible(false);
        updateMemoryBase(null);
        if(_threadStatus == STATUS_DONE){
            programDone(_duration);
            return;
        }

        if(_threadStatus != STATUS_TIMEOUT){
            System.out.println("Breakpoint "+ _threadStatus + " hit!");
            int _breakpoint = executionEnvironment.readBreakpoints()[_threadStatus];
            for(int i=0; i<MachineConstants.THREAD_COUNT; i++){
                if(executionEnvironment.getPcForThread(i) == _breakpoint){
                    if(jTabbedPane1.getSelectedIndex() < MachineConstants.THREAD_COUNT){
                        jTabbedPane1.setSelectedIndex(i);
                    }
                    break;
                }
            }
        }

        resetButtonState(true);
        updateCurrentInstructionLine();
        if(jTabbedPane1.getSelectedIndex() == MachineConstants.THREAD_COUNT + 1){
            ((ThreadListPanel)jTabbedPane1.getComponentAt(MachineConstants.THREAD_COUNT + 1)).update(executionEnvironment);
        }
    }

    public void executionError(){
        resetButtonState(false);
        updateCurrentInstructionLine();
    }

    public void updateArrayMemory(int _address, Line _data) {
        getArrayPanel().updateMemory(_address, _data);
    }

    public void updateArrayRegister(int _register, Line _data) {
        getArrayPanel().updateRegister(_register, _data);
    }
    
    private ArrayPanel getArrayPanel(){
        ArrayPanel _arrayPanel = (ArrayPanel) jTabbedPane1.getComponentAt(MachineConstants.THREAD_COUNT);
        return _arrayPanel;
    }

    public void reset() {
        getArrayPanel().reset();
    }

    public void updateArrayFlags(Line _flags) {
        getArrayPanel().updateFlags(_flags);
    }

    public void updateMemoryBase(){
        updateMemoryBase(null);
    }

    private void updateMemoryBase(ActionEvent evt) {
        try{
            long _value = 0;
            String _text = jTextField3.getText();
            if(_text.startsWith("0x")){
                _text = _text.substring(2);
                _value = Long.parseLong(_text, 16);
            }else{
                _value = Long.parseLong(_text);
            }
            if((_value & 0x0fL) != 0){
                throw new NumberFormatException();
            }
            
            updateTableAddress(_value);
            updateMemory(_value);
            memoryOffset = _value;
        }catch(Exception nfe){
            jTextField3.setText("0x" + Integer.toHexString((int)memoryOffset));
            updateTableAddress(memoryOffset);
            updateMemory(memoryOffset);
            JOptionPane.showMessageDialog(this, "Invalid base address (needs to be multiple of 16).");
            nfe.printStackTrace();
        }
    }

    private void updateMemory(long _offset) {
        for(long i=_offset; i<_offset + ROWS_TO_DISPLAY * 16; i+=4){
            int _data = executionEnvironment.read((int)i);

            int _row = (int)(i - _offset) >>> 4;
            int _column = (((int)(i - _offset) >>> 2) & 0x3) + 1;
            jTable1.getModel().setValueAt(Integer.toHexString(_data), _row, _column);
        }
    }

    private void updateTableAddress(long _offset) {
        for(int i=0; i<ROWS_TO_DISPLAY; i++){
            jTable1.getModel().setValueAt(Integer.toHexString((int)_offset + i * 16), i, 0);
        }
    }

    public void toggleSerialWindow() {
        rs232Gui.setVisible(!rs232Gui.isVisible());
    }




}
